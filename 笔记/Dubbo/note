
单一引用架构
网站访问量很小，各个功能都放在一个服务器里面，开发部署都简单。扩展不容易，协同开发不容易

垂直应用架构
把单体大应用拆成小应用，独立部署到服务器上，分工容易，性能扩展也稍容易。
缺点，
1. 无法实现界面和业务逻辑的实现分离开。
2. 应用不可能完全独立，大量的应用之间需要交互

分布式服务架构（RPC）
把界面和业务逻辑分别放在不同的服务器中，用RPC实现远程过程调用。需要分布式服务框架。
需要访问压力调用中心，实施监控数据，动态调度，提高资源利用率

流动计算架构
引入调度中心，基于访问压力实时管理集群容量，提高集群利用率

RPC：远程控制调用

registry是注册中心
provider服务提供者
consumer服务消费者

container是dubbo框架容器
monitor是监控中心
运行流程
容器启动，服务提供者会将自己提供的信息注册到注册中心里面，服务消费者从注册中心订阅需要的服务。如果服务出现变更，注册中心会将变更推送给服务消费者，当消费者拿到所有可以调用的服务，消费者就可以调用服务提供者的服务（比如用户查询业务，可以根据负载均衡算法选一个进行调用），每次调用信息，调用时间和调用服务信息，会定时将信息发送给监控中心



环境搭建，ZooKeeper注册中心

Dubbo支持许多注册中心: zookeeper

Dubbo监控中心: dubbo-admin


需求：
某个电商系统，订单服务需要调用用户服务获取某个用户的所有地址：

现在我们需要创建两个服务模块进行测试。

订单服务web模块：创建订单等
用户服务service模块：查询用户地址等

订单服务web模块在A服务器，用户服务模块在B服务器，A可以远程调用B的功能。

